// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ScientistsActivity.Core;

#nullable disable

namespace ScientistsActivity.Core.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231018212220_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataSourceScenario", b =>
                {
                    b.Property<int>("DataSourcesId")
                        .HasColumnType("int");

                    b.Property<int>("ScenariosId")
                        .HasColumnType("int");

                    b.HasKey("DataSourcesId", "ScenariosId");

                    b.HasIndex("ScenariosId");

                    b.ToTable("DataSourceScenario");
                });

            modelBuilder.Entity("ScientistsActivity.Core.Models.DataSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Endpoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DataSources");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Endpoint = "json",
                            Name = "Json Parses"
                        },
                        new
                        {
                            Id = 2,
                            Endpoint = "database",
                            Name = "Database Parses"
                        },
                        new
                        {
                            Id = 3,
                            Endpoint = "internation",
                            Name = "Internation Parses"
                        },
                        new
                        {
                            Id = 4,
                            Endpoint = "google",
                            Name = "Google Parses"
                        },
                        new
                        {
                            Id = 5,
                            Endpoint = "xml",
                            Name = "Xml Parses"
                        });
                });

            modelBuilder.Entity("ScientistsActivity.Core.Models.Parameters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double?>("DateWeight")
                        .HasColumnType("float");

                    b.Property<DateTime?>("From")
                        .HasColumnType("datetime2");

                    b.Property<string>("KeyWords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("KeyWordsWeight")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("NameWeight")
                        .HasColumnType("float");

                    b.Property<double?>("RangeWeight")
                        .HasColumnType("float");

                    b.Property<int>("ScenarioId")
                        .HasColumnType("int");

                    b.Property<string>("Themes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("ThemesWeight")
                        .HasColumnType("float");

                    b.Property<DateTime?>("To")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ScenarioId")
                        .IsUnique();

                    b.ToTable("Parameters");
                });

            modelBuilder.Entity("ScientistsActivity.Core.Models.Probabilities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Percentage")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Queries")
                        .HasColumnType("int");

                    b.Property<int>("ScenarioId")
                        .HasColumnType("int");

                    b.Property<string>("SourceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ScenarioId");

                    b.ToTable("Probabilities");
                });

            modelBuilder.Entity("ScientistsActivity.Core.Models.Scenario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TotalSessionSize")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Scenarios");
                });

            modelBuilder.Entity("DataSourceScenario", b =>
                {
                    b.HasOne("ScientistsActivity.Core.Models.DataSource", null)
                        .WithMany()
                        .HasForeignKey("DataSourcesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScientistsActivity.Core.Models.Scenario", null)
                        .WithMany()
                        .HasForeignKey("ScenariosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScientistsActivity.Core.Models.Parameters", b =>
                {
                    b.HasOne("ScientistsActivity.Core.Models.Scenario", "Scenario")
                        .WithOne("ParameterWeights")
                        .HasForeignKey("ScientistsActivity.Core.Models.Parameters", "ScenarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scenario");
                });

            modelBuilder.Entity("ScientistsActivity.Core.Models.Probabilities", b =>
                {
                    b.HasOne("ScientistsActivity.Core.Models.Scenario", "Scenario")
                        .WithMany("InitialProbabilities")
                        .HasForeignKey("ScenarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scenario");
                });

            modelBuilder.Entity("ScientistsActivity.Core.Models.Scenario", b =>
                {
                    b.Navigation("InitialProbabilities");

                    b.Navigation("ParameterWeights");
                });
#pragma warning restore 612, 618
        }
    }
}
